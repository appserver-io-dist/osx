<?xml version="1.0"?>
<!DOCTYPE project>
<project name="appserver-io-dist/osx" basedir="." default="dependencies-init">

    <!-- ==================================================================== -->
    <!-- Load the environment variables into our properties                   -->
    <!-- ==================================================================== -->
    <property environment="env" />

    <!-- ==================================================================== -->
    <!-- Generate a time stamp for further use in build targets               -->
    <!-- ==================================================================== --> 
    <tstamp>
        <format property="time.stamp" pattern="yyyy-MM-dd-HHmmss"/>
    </tstamp>

    <!-- ==================================================================== -->
    <!-- Load all property files in the right order                           -->
    <!-- ==================================================================== -->
    <property file="${basedir}/build.properties"/>
    <property file="${basedir}/build.default.properties"/>

    <!-- ==================================================================== -->
    <!-- Create some basic properties which we need for further processing.   -->
    <!-- ==================================================================== -->
    <property name="src.dir" value="${basedir}/src" />
    <property name="target.dir" value="${basedir}/target" />
    <property name="build.dir" value="${basedir}/build" />
    <property name="tests.dir" value="${basedir}/tests" />
    <property name="temp.dir" value="${basedir}/tmp" />
    <property name="temp.mount.dir" value="${temp.dir}/mount" />
    <property name="reports.dir" value="${basedir}/reports" />

    <!-- ==================================================================== -->
    <!-- Initialize the library specific properties                           -->
    <!-- ==================================================================== -->
    <property name="codepool" value="vendor"/>

    <!-- ==================================================================== -->
    <!-- Initialize the directory where we can find the real build files      -->
    <!-- ==================================================================== -->
    <property name="dependency.dir" value ="${basedir}/${codepool}" />
    <property name="package.dir" value="${dependency.dir}/package" />
    <property name="package.remote-location" value="https://github.com/appserver-io-dist/package.git" />

    <!-- ==================================================================== -->
    <!-- Import the local tests/*files                                        -->
    <!-- ==================================================================== -->
    <import file="tests/test.xml"/>

    <!-- ==================================================================== -->
    <!-- Import the package build files if they are present                   -->
    <!-- ==================================================================== -->
    <import file="${package.dir}/common.xml" optional="true" />

    <!-- ==================================================================== -->
    <!-- Cleans the directory used to copy in build files                     -->
    <!-- ==================================================================== -->
    <target name="clean-mount">
        <delete dir="${temp.mount.dir}" includeemptydirs="true" quiet="false" verbose="false" failonerror="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Cleans the target directories                                        -->
    <!-- ==================================================================== -->
    <target name="clean">
        <delete dir="${target.dir}" includeemptydirs="true" quiet="false" verbose="false" failonerror="true"/>
        <delete dir="${temp.dir}" includeemptydirs="true" quiet="false" verbose="false" failonerror="true"/>
        <delete dir="${temp.mount.dir}" includeemptydirs="true" quiet="false" verbose="false" failonerror="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Cleans the build directories                                         -->
    <!-- ==================================================================== -->
    <target name="clean-build"  depends="prepare-build">
        <delete includeemptydirs="true" quiet="false" verbose="false" failonerror="true">
            <fileset dir="${build.dir}" includes="**/*"/>
        </delete>
    </target>

    <!-- ==================================================================== -->
    <!-- Cleans the reports directories                                       -->
    <!-- ==================================================================== -->
    <target name="clean-reports"  depends="prepare-reports">
        <delete includeemptydirs="true" quiet="false" verbose="false" failonerror="true">
            <fileset dir="${reports.dir}" includes="**/*"/>
        </delete>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the directoy used to mount from the vagrant box             -->
    <!-- ==================================================================== -->
    <target name="prepare-mount" depends="clean-mount">
        <mkdir dir="${temp.mount.dir}" />
        <mkdir dir="${temp.mount.dir}/reports" />
        <mkdir dir="${temp.mount.dir}/build" />
        <mkdir dir="${temp.mount.dir}/src" />
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the target dir                                              -->
    <!-- ==================================================================== -->
    <target name="prepare" depends="clean">
        <mkdir dir="${target.dir}" />
        <mkdir dir="${temp.dir}" />
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the reports environment                                     -->
    <!-- ==================================================================== -->
    <target name="prepare-reports">
        <mkdir dir="${reports.dir}" />
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the build environment                                       -->
    <!-- ==================================================================== -->
    <target name="prepare-build">
        <mkdir dir="${build.dir}" />
    </target>

    <!-- ==================================================================== -->
    <!-- Checks if the package helper libary is present                       -->
    <!-- ==================================================================== -->
    <target name="package-library-present">
        <!-- check for the existence of the most central file of the package library -->
        <available file="${package.dir}/common.xml" property="package-library.present" />
    </target>

    <!-- ==================================================================== -->
    <!-- Loads all dependencies needed for the execution of build targets.    -->
    <!-- Not to be confused with the loading of dependencies needed for the   -->
    <!-- built packages!                                                      -->
    <!-- ==================================================================== -->
    <target name="dependencies-init" depends="package-library-present" unless="package-library.present">
        <!-- create the target dir -->
        <mkdir dir="${dependency.dir}" />
        <!-- clone the latest version of our package library -->
        <exec dir="${dependency.dir}" executable="git">
            <arg line="clone ${package.remote-location}" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Propagates the recent build to the official release sites, updates   -->
    <!-- release lists, etc.. Not to be mistaken for the "publish" target     -->
    <!-- ==================================================================== -->
    <target name="release" description="Propagates the recent build to the official release sites, updates release lists, etc..">
        <echo message="Now starting release cycle"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Publishes the recent build to any snapshot hubs, etc.. Not to be     -->
    <!-- mistaken for the "release" target                                    -->
    <!-- ==================================================================== -->
    <target name="publish" description="Publishes the recent build to any snapshot hubs, etc..">
        <echo message="Now starting publish cycle"/>
        <!-- upload the build artifacts to the snapshot hub -->
        <antcall target="copy-to-hub" />
    </target>

    <!-- ==================================================================== -->
    <!-- Will prepare a mount point for the AFP mount of the build data       -->
    <!-- ==================================================================== -->
    <target name="prepare-build-mounts" depends="prepare-mount">
        <!-- trying to mount the needed directories -->
        <exec dir="${temp.mount.dir}" executable="mount_afp">
            <arg line="'afp://${vagrant.user.name}:${vagrant.user.password}@127.0.0.1:${vagrant.afp.local-port}/vagrant' '${temp.mount.dir}'" />
        </exec>
        <exec dir="${temp.mount.dir}" executable="mount_afp">
            <arg line="'afp://${vagrant.user.name}:${vagrant.user.password}@127.0.0.1:${vagrant.afp.local-port}/vagrant/build' '${temp.mount.dir}/build'" />
        </exec>
        <exec dir="${temp.mount.dir}" executable="mount_afp">
            <arg line="'afp://${vagrant.user.name}:${vagrant.user.password}@127.0.0.1:${vagrant.afp.local-port}/vagrant/reports' '${temp.mount.dir}/reports'" />
        </exec>
        <exec dir="${temp.mount.dir}" executable="mount_afp">
            <arg line="'afp://${vagrant.user.name}:${vagrant.user.password}@127.0.0.1:${vagrant.afp.local-port}/vagrant/src' '${temp.mount.dir}/src'" />
        </exec>
        <!-- copy the build files into the mount -->
        <copy todir="${temp.mount.dir}" failonerror="true">
            <fileset dir="${temp.dir}">
               <include name="*/**"/>
               <exclude name="Vagrantfile"/>
               <exclude name="provision.sh"/>
            </fileset>
        </copy>
        <!-- prepare a tmp dir for work within the VM -->
        <mkdir dir="${temp.mount.dir}/tmp" />
    </target>

    <!-- ==================================================================== -->
    <!-- Will test if the targeted box is already up and running.             -->
    <!-- Will set the properties "vagrant-box.running" or                     -->
    <!-- "vagrant-box.not-running" depending on the result                    -->
    <!-- ==================================================================== -->
    <target name="test-vagrant-box-running">
        <!-- issue the actual command -->
        <exec dir="${temp.dir}" executable="vagrant" outputproperty="vagrant-box.status">
            <arg value="status" />
        </exec>
        <parse-vagrant-box-status status="${vagrant-box.status}" boxname="${vagrant-box.name}" />
        <condition property="vagrant-box.not-running">
            <isset property="BOX_NOT_RUNNING"/>
        </condition>
        <condition property="vagrant-box.running">
            <isset property="BOX_RUNNING"/>
        </condition>
    </target>

    <!-- ==================================================================== -->
    <!-- Will parse a vagrant box status to look for the "running" state.     -->
    <!-- Will set BOX_RUNNING if found, BOX_NOT_RUNNING if otherwise          -->
    <!-- ==================================================================== -->
    <scriptdef name="parse-vagrant-box-status" language="javascript">
        <attribute name="status"/>
        <attribute name="boxname"/>
        <![CDATA[
            // getting the params
            var status = attributes.get("status");
            var boxName = attributes.get("boxname");
            // check the occurence of a certain run indicator
            if (status.indexOf(boxName + " running") > -1) {
                project.setProperty("BOX_RUNNING", true);
            } else {
                project.setProperty("BOX_NOT_RUNNING", true);
            }
        ]]>
    </scriptdef>

    <!-- ==================================================================== -->
    <!-- Will start a vagrant box within the tmp directory                    -->
    <!-- ==================================================================== -->
    <target name="start-vagrant-box" depends="test-vagrant-box-running" if="vagrant-box.not-running">
        <!-- tell the user we need the box name first -->
        <fail unless="vagrant-box.name" message="Please specify the type of box to start e.g. using 'ant start-vagrant-build-box'" />
        <!-- issue the actual start command -->
        <exec dir="${temp.dir}" executable="vagrant" errorproperty="vagrant-box.start.failed">
            <arg line="up ${vagrant-box.name} --provider=${vagrant.provider} --destroy-on-error" />
        </exec>
        <!-- prepare the mount point -->
        <antcall target="prepare-build-mounts" />
        <!-- eliminate the possiblity of empty but existing error output -->
        <property name="vagrant-box.start.failed" value=""/>
        <condition property="fatal-error.occured" value="${vagrant-box.start.failed}">
            <not>
                <equals arg1="${vagrant-box.start.failed}" arg2=""/>
            </not>
        </condition>
        <!-- check for a specific build failure and make an emergency destroy -->
        <antcall target="destroy-vagrant-box-on-error" />
        <!-- tell them about any failures we might encountered -->
        <fail if="fatal-error.occured" message="Starting the vagrant box failed! Error message was: '${fatal-error.occured}', also see log above." />
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the appserver sources                                       -->
    <!-- ==================================================================== -->
    <target name="prepare-appserver-source" depends="prepare">
        <!-- install local composer -->
        <antcall target="install-composer" />
        <!-- clone appserver src -->
        <exec dir="${temp.dir}" executable="git">
            <arg line="clone ${appserver.url.repo} appserver-src" />
        </exec>
        <!-- get lastest tag version -->
        <exec dir="${temp.dir}/appserver-src" executable="git" outputProperty="appserver.src.git.tag">
            <arg line="describe --abbrev=0 --tags" />
        </exec>
        <property name="appserver.src.version" value="${appserver.src.git.tag}" />
        <!-- checkout lastest tag version -->
        <echo message="Checkout lastest tag version ${appserver.src.version}" />
        <exec dir="${temp.dir}/appserver-src" executable="git">
            <arg line="checkout -q ${appserver.src.version}" />
        </exec>
        <!-- move to target.dir -->
        <move todir="${target.dir}/src/opt/appserver">
            <fileset dir="${temp.dir}/appserver-src" />
        </move>
        <!-- remove git db files -->
        <delete dir="${target.dir}/src/opt/appserver/.git" includeemptydirs="true" />
        <!-- create version name -->
        <create-version-name 
            tag="${appserver.src.version}"
            build="${build.number}" 
            suffixSeparator="+" 
            outputProperty="VERSION_NAME" />
        <!-- create the file with the version number -->
        <echo file="${target.dir}/src/opt/appserver/etc/appserver/.release-version" message="${VERSION_NAME}" />
        <!-- install dependencies via composer and let postinstall-scripts proceed -->
        <exec dir="${target.dir}/src/opt/appserver" executable="php">
            <arg line="${temp.dir}/composer.phar install --prefer-dist --no-dev --no-interaction --ignore-platform-reqs --optimize-autoloader" />
        </exec>
        <!-- create deploy folder if not exists -->
        <mkdir dir="${target.dir}/src/opt/appserver/deploy" />
        <!-- deploy example app by putting it into deploy folder of runtime -->
        <get src="${appserver.apps.example.url}" dest="${target.dir}/src/opt/appserver/deploy/example.phar" />
    </target>

    <!-- ==================================================================== -->
    <!-- Creates a .pkg package for the appserver sources                     -->
    <!-- ==================================================================== -->
    <target name="create-appserver-source-pkg" depends="prepare-appserver-source">
        <!-- create source package name -->
        <create-package-name 
            tag="${appserver.src.version}"
            outputProperty="SOURCE_PACKAGE_NAME"
            prefix="${build.name.prefix}source" 
            build="${build.number}" 
            suffixSeparator="+" 
            versionSeparator="_" 
            architecture="${build.name.suffix}" 
            architectureSeparator="_" 
            extension="${build.name.ext}" />
        <!-- copy packaging build files to target -->
        <copy todir="${target.dir}">
            <fileset dir="${src.dir}/source">
                <include name="**/*" />
            </fileset>
        </copy>
        <!-- make the install scripts + binaries executable -->
        <chmod perm="755" dir="${target.dir}/scripts" includes="*" />
        <chmod perm="755" dir="${target.dir}/src/opt/appserver/bin" includes="appserver*" />
        <chmod perm="755" dir="${target.dir}/src/opt/appserver/sbin" includes="appserver*" />
        <!-- build sub pkg for osx -->
        <exec dir="${basedir}" executable="pkgbuild">
            <arg value="--root" />
            <arg value="${target.dir}/src/" />
            <arg value="--scripts" />
            <arg value="${target.dir}/scripts" />
            <arg value="--install-location" />
            <arg value="/" />
            <arg value="--version" />
            <arg value="${appserver.src.version}" />
            <arg value="--identifier" />
            <arg value="com.techdivision.appserver-io.source" />
            <arg value="${build.dir}/${SOURCE_PACKAGE_NAME}" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates a .pkg package for the appserver runtime                     -->
    <!-- ==================================================================== -->
    <target name="create-appserver-runtime-pkg" depends="prepare">
        <!-- create runtime source package name -->
        <create-package-name 
            tag="${appserver.runtime.version}"
            outputProperty="RUNTIME_SOURCE_PACKAGE_NAME"
            prefix="${build.name.prefix}runtime" 
            build="${appserver.runtime.build}" 
            suffixSeparator="+" 
            versionSeparator="_" 
            architecture="${build.name.suffix}" 
            architectureSeparator="_" 
            extension="tar.gz" />
        <!-- get runtime in specific version as tar.gz -->
        <get src="${appserver.runtime.url}/${RUNTIME_SOURCE_PACKAGE_NAME}" dest="${temp.dir}/${RUNTIME_SOURCE_PACKAGE_NAME}" />
        <mkdir dir="${target.dir}/runtime/opt" />
        <exec executable="tar">
            <arg value="-xzf" />
            <arg value="${temp.dir}/${RUNTIME_SOURCE_PACKAGE_NAME}" />
            <arg value="-p" />
            <arg value="-C" />
            <arg value="${target.dir}/runtime/opt" />
        </exec>
        <!-- copy packaging build files to target -->
        <copy todir="${target.dir}">
            <fileset dir="${src.dir}/runtime">
                <include name="**/*" />
            </fileset>
        </copy>
        <!-- make the install scripts executable -->
        <chmod perm="755" dir="${target.dir}/scripts" includes="*" />
        <!-- create runtime dist package name -->
        <create-package-name 
            tag="${appserver.runtime.version}"
            outputProperty="RUNTIME_DIST_PACKAGE_NAME"
            prefix="${build.name.prefix}runtime" 
            build="${appserver.runtime.build}" 
            suffixSeparator="+" 
            versionSeparator="_" 
            architecture="${build.name.suffix}" 
            architectureSeparator="_" 
            extension="${build.name.ext}" />
        <!-- build sub pkg for osx -->
        <exec dir="${basedir}" executable="pkgbuild">
            <arg value="--root" />
            <arg value="${target.dir}/runtime" />
            <arg value="--scripts" />
            <arg value="${target.dir}/scripts" />
            <arg value="--install-location" />
            <arg value="/" />
            <arg value="--version" />
            <arg value="${appserver.runtime.version}" />
            <arg value="--identifier" />
            <arg value="com.techdivision.appserver-io.runtime" />
            <arg value="${build.dir}/${RUNTIME_DIST_PACKAGE_NAME}" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates the distribution package *.mpkg locally                      -->
    <!-- ==================================================================== -->
    <target name="local-build" depends="prepare-build, create-appserver-source-pkg, create-appserver-runtime-pkg, prepare">
        <!-- create dist package name -->
        <create-package-name 
            tag="${appserver.src.version}"
            outputProperty="DIST_PACKAGE_NAME"
            prefix="${build.name.prefix}dist" 
            build="${build.number}" 
            suffixSeparator="+" 
            versionSeparator="_" 
            architecture="${build.name.suffix}" 
            architectureSeparator="_" 
            extension="${build.name.ext}" />
        <!-- copy packaging build files to target -->
        <copy todir="${target.dir}">
            <fileset dir="${src.dir}/dist">
                <include name="**/*" />
                <exclude name="distribution.xml" />
            </fileset>
        </copy>
        <copy todir="${target.dir}">
            <fileset dir="${src.dir}/dist">
                <include name="distribution.xml" />
            </fileset>
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>
        <!-- build pkg for osx -->
        <exec dir="${basedir}" executable="productbuild">
            <arg value="--distribution" />
            <arg value="${target.dir}/distribution.xml" />
            <arg value="--package-path" />
            <arg value="${basedir}/build" />
            <arg value="--resources" />
            <arg value="${target.dir}/resources" />
            <arg value="${build.dir}/${DIST_PACKAGE_NAME}" />
        </exec>
    </target>
    
    <!-- ==================================================================== -->
    <!-- Extracts version and suffix from a tag                               -->
    <!-- ==================================================================== -->
    <scriptdef name="create-version-name" language="javascript">
        <attribute name="tag" />
        <attribute name="build" />
        <attribute name="outputproperty" />
        <attribute name="suffixseparator" />
        <![CDATA[

        // load the attributes
        var tag = attributes.get("tag");
        var build = attributes.get("build");
        var outputProperty= attributes.get("outputproperty");
        var suffixSeparator = attributes.get("suffixseparator");
        
        // declare version and version suffix
        var versionName = '';
        var resultSuffix = '';
        var resultVersion = tag;

        // try to extract the version suffix, e. g. beta1
        if (tag.indexOf("-") !== -1) {

           // try to load the suffix
           resultVersion = tag.substring(0, tag.indexOf("-"));
           resultSuffix = tag.replace(resultVersion + "-", "");
        }
        
        // initialize the version name
        versionName = resultVersion;

        // append the build number
        if (build != "") {
            versionName += "-" + build;
        }

        // append the suffix if available
        if (resultSuffix != "") {
            versionName += suffixSeparator + resultSuffix;
        }

        // store version in the output properties
        project.setProperty(outputProperty, versionName);
    ]]>
    </scriptdef>

    <!-- ==================================================================== -->
    <!-- Will create a Mac OS X specific package name                         -->
    <!-- ==================================================================== -->
    <scriptdef name="create-package-name" language="javascript">
        <attribute name="tag" />
        <attribute name="build" />
        <attribute name="prefix" />
        <attribute name="extension" />
        <attribute name="architecture" />
        <attribute name="outputproperty" />
        <attribute name="suffixseparator" />
        <attribute name="versionseparator" />
        <attribute name="architectureseparator" />
        <![CDATA[

        // declare the package name
        var packageName = '';

        // load the attributes
        var tag = attributes.get("tag");
        var build = attributes.get("build");
        var prefix = attributes.get("prefix");
        var extension = attributes.get("extension");
        var architecture = attributes.get("architecture");
        var outputProperty = attributes.get("outputproperty");
        var suffixSeparator = attributes.get("suffixseparator");
        var versionSeparator = attributes.get("versionseparator");
        var architectureSeparator = attributes.get("architectureseparator");

        // declare version and version suffix
        var resultVersion = tag;
        var resultSuffix = '';
        
        // the package name ALWAYS starts with the prefix
        packageName = prefix;

        // try to extract the version suffix, e. g. beta1
        if (tag.indexOf("-") !== -1) {

           // try to load the suffix
           resultVersion = tag.substring(0, tag.indexOf("-"));
           resultSuffix = tag.replace(resultVersion + "-", "");
        }

        // append the extracted version
        if (resultVersion != "") {
            packageName += versionSeparator + resultVersion;
        }

        // append the build number
        if (build != "") {
            packageName += "-" + build;
        }

        // append the OS specific suffix separator
        if (resultSuffix != "") {
            packageName += suffixSeparator + resultSuffix;
        }

        // append the architecture
        if (architecture != "") {
            packageName += architectureSeparator + architecture;
        }

        // append the package extension
        if (extension != "") {
            packageName += "." + extension;
        }
        
        // store the result in output property
        project.setProperty(outputProperty, packageName);
    ]]>
    </scriptdef>

</project>
